{"ast":null,"code":"import _classCallCheck from\"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import{action}from'mobx';import CONST from'../constants.js';import stores from'./index';export var SquareStore=function SquareStore(){var _this=this;_classCallCheck(this,SquareStore);this.revealedSquareCount=0;this.initializeRevealedSquareCount=function(){return _this.revealedSquareCount=0;};this.flagSquare=function(y,x){var _stores$board=stores.board,isSquareRevealedBoard=_stores$board.isSquareRevealedBoard,setIsSquareRevealedBoard=_stores$board.setIsSquareRevealedBoard;var _stores$flag=stores.flag,flagCount=_stores$flag.flagCount,incrementFlagCount=_stores$flag.incrementFlagCount,decreaseFlagCount=_stores$flag.decreaseFlagCount;var mineCount=stores.mine.mineCount;if(isSquareRevealedBoard[y][x]===CONST.IS_FLAGGED){decreaseFlagCount();setIsSquareRevealedBoard(y,x,CONST.IS_NOT_REVEALED);}else if(isSquareRevealedBoard[y][x]===CONST.IS_NOT_REVEALED){if(mineCount-flagCount===0)return;incrementFlagCount();setIsSquareRevealedBoard(y,x,CONST.IS_FLAGGED);}};this.revealSquare=function(y,x){// console.log('revealSquare', y, x)\nvar _stores$game=stores.game,gameState=_stores$game.gameState,setGameState=_stores$game.setGameState;var _stores$board2=stores.board,minesAndHintsBoard=_stores$board2.minesAndHintsBoard,isSquareRevealedBoard=_stores$board2.isSquareRevealedBoard,setMinesAndHintsBoard=_stores$board2.setMinesAndHintsBoard,setIsSquareRevealedBoard=_stores$board2.setIsSquareRevealedBoard,boardTotalSize=_stores$board2.boardTotalSize,isOutsideTheBoard=_stores$board2.isOutsideTheBoard;var _stores$elapsedTime=stores.elapsedTime,startCountingTime=_stores$elapsedTime.startCountingTime,stopCountingTime=_stores$elapsedTime.stopCountingTime;var setDetonatedMineCoordinates=stores.game.setDetonatedMineCoordinates;var mineCount=stores.mine.mineCount;if(gameState===CONST.MINE_DETONATED)return;if(isSquareRevealedBoard[y][x]===CONST.IS_REVEALED)return;if(gameState===CONST.BOARD_INITIALIZED){setMinesAndHintsBoard(y,x);startCountingTime();}if(minesAndHintsBoard[y][x]===CONST.IS_MINE){setDetonatedMineCoordinates(y,x);setGameState(CONST.MINE_DETONATED);stopCountingTime();return;}setIsSquareRevealedBoard(y,x,CONST.IS_REVEALED);_this.revealedSquareCount++;if(_this.revealedSquareCount===boardTotalSize-mineCount){setGameState(CONST.GAME_CLEARED);stopCountingTime();return;}if(minesAndHintsBoard[y][x]===0){for(var ny=y-1;ny<=y+1;ny++){if(isOutsideTheBoard(ny))continue;for(var nx=x-1;nx<=x+1;nx++){if(isOutsideTheBoard(nx))continue;if(minesAndHintsBoard[ny][nx]===CONST.IS_MINE)continue;_this.revealSquare(ny,nx);}}}};};","map":{"version":3,"sources":["/Users/song/minesweeper/src/Minesweeper/stores/SquareStore.js"],"names":["action","CONST","stores","SquareStore","revealedSquareCount","initializeRevealedSquareCount","flagSquare","y","x","board","isSquareRevealedBoard","setIsSquareRevealedBoard","flag","flagCount","incrementFlagCount","decreaseFlagCount","mineCount","mine","IS_FLAGGED","IS_NOT_REVEALED","revealSquare","game","gameState","setGameState","minesAndHintsBoard","setMinesAndHintsBoard","boardTotalSize","isOutsideTheBoard","elapsedTime","startCountingTime","stopCountingTime","setDetonatedMineCoordinates","MINE_DETONATED","IS_REVEALED","BOARD_INITIALIZED","IS_MINE","GAME_CLEARED","ny","nx"],"mappings":"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","sourcesContent":["import {action} from 'mobx';\nimport CONST from '../constants.js';\nimport stores from './index';\n\nexport class SquareStore {\n    revealedSquareCount = 0;\n\n    initializeRevealedSquareCount = () => this.revealedSquareCount = 0;\n\n    flagSquare = (y, x) => {\n        const {isSquareRevealedBoard, setIsSquareRevealedBoard} = stores.board\n        const {flagCount, incrementFlagCount, decreaseFlagCount} = stores.flag\n        const {mineCount} = stores.mine\n\n        if (isSquareRevealedBoard[y][x] === CONST.IS_FLAGGED) {\n            decreaseFlagCount()\n            setIsSquareRevealedBoard(y, x, CONST.IS_NOT_REVEALED)\n\n        } else if (isSquareRevealedBoard[y][x] === CONST.IS_NOT_REVEALED) {\n            if (mineCount - flagCount === 0) return;\n            incrementFlagCount()\n            setIsSquareRevealedBoard(y, x, CONST.IS_FLAGGED)\n\n        }\n    }\n\n    revealSquare = (y, x) => {\n        // console.log('revealSquare', y, x)\n        const {gameState, setGameState} = stores.game;\n        const {\n            minesAndHintsBoard,\n            isSquareRevealedBoard,\n            setMinesAndHintsBoard,\n            setIsSquareRevealedBoard,\n            boardTotalSize,\n            isOutsideTheBoard\n        } = stores.board;\n        const {startCountingTime, stopCountingTime} = stores.elapsedTime;\n        const {setDetonatedMineCoordinates} = stores.game;\n        const {mineCount} = stores.mine\n\n        if (gameState === CONST.MINE_DETONATED) return\n\n        if (isSquareRevealedBoard[y][x] === CONST.IS_REVEALED) return\n\n        if (gameState === CONST.BOARD_INITIALIZED) {\n            setMinesAndHintsBoard(y, x);\n            startCountingTime();\n        }\n\n        if (minesAndHintsBoard[y][x] === CONST.IS_MINE) {\n            setDetonatedMineCoordinates(y, x)\n            setGameState(CONST.MINE_DETONATED)\n            stopCountingTime();\n            return;\n        }\n\n        setIsSquareRevealedBoard(y, x, CONST.IS_REVEALED)\n        this.revealedSquareCount++;\n\n        if (this.revealedSquareCount === boardTotalSize - mineCount) {\n            setGameState(CONST.GAME_CLEARED)\n            stopCountingTime();\n            return;\n        }\n\n        if (minesAndHintsBoard[y][x] === 0) {\n            for (let ny = y - 1; ny <= y + 1; ny++) {\n                if (isOutsideTheBoard(ny)) continue;\n\n                for (let nx = x - 1; nx <= x + 1; nx++) {\n                    if (isOutsideTheBoard(nx)) continue;\n                    if (minesAndHintsBoard[ny][nx] === CONST.IS_MINE) continue;\n\n                    this.revealSquare(ny, nx)\n                }\n            }\n        }\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}