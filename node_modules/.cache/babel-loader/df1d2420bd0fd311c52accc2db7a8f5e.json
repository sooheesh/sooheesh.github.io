{"ast":null,"code":"import _classCallCheck from \"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { action } from 'mobx';\nimport CONST from '../constants.js';\nimport stores from './index';\nexport let SquareStore = function SquareStore() {\n  _classCallCheck(this, SquareStore);\n\n  this.revealedSquareCount = 0;\n\n  this.initializeRevealedSquareCount = () => this.revealedSquareCount = 0;\n\n  this.flagSquare = (y, x) => {\n    const {\n      isSquareRevealedBoard,\n      setIsSquareRevealedBoard\n    } = stores.board;\n    const {\n      flagCount,\n      incrementFlagCount,\n      decreaseFlagCount\n    } = stores.flag;\n    const {\n      mineCount\n    } = stores.mine;\n\n    if (isSquareRevealedBoard[y][x] === CONST.IS_FLAGGED) {\n      decreaseFlagCount();\n      setIsSquareRevealedBoard(y, x, CONST.IS_NOT_REVEALED);\n    } else if (isSquareRevealedBoard[y][x] === CONST.IS_NOT_REVEALED) {\n      if (mineCount - flagCount === 0) return;\n      incrementFlagCount();\n      setIsSquareRevealedBoard(y, x, CONST.IS_FLAGGED);\n    }\n  };\n\n  this.revealSquare = (y, x) => {\n    // console.log('revealSquare', y, x)\n    const {\n      gameState,\n      setGameState\n    } = stores.game;\n    const {\n      minesAndHintsBoard,\n      isSquareRevealedBoard,\n      setMinesAndHintsBoard,\n      setIsSquareRevealedBoard,\n      boardTotalSize,\n      isOutsideTheBoard\n    } = stores.board;\n    const {\n      startCountingTime,\n      stopCountingTime\n    } = stores.elapsedTime;\n    const {\n      setDetonatedMineCoordinates\n    } = stores.game;\n    const {\n      mineCount\n    } = stores.mine;\n    if (gameState === CONST.MINE_DETONATED) return;\n    if (isSquareRevealedBoard[y][x] === CONST.IS_REVEALED) return;\n\n    if (gameState === CONST.BOARD_INITIALIZED) {\n      setMinesAndHintsBoard(y, x);\n      startCountingTime();\n    }\n\n    if (minesAndHintsBoard[y][x] === CONST.IS_MINE) {\n      setDetonatedMineCoordinates(y, x);\n      setGameState(CONST.MINE_DETONATED);\n      stopCountingTime();\n      return;\n    }\n\n    setIsSquareRevealedBoard(y, x, CONST.IS_REVEALED);\n    this.revealedSquareCount++;\n\n    if (this.revealedSquareCount === boardTotalSize - mineCount) {\n      setGameState(CONST.GAME_CLEARED);\n      stopCountingTime();\n      return;\n    }\n\n    if (minesAndHintsBoard[y][x] === 0) {\n      for (let ny = y - 1; ny <= y + 1; ny++) {\n        if (isOutsideTheBoard(ny)) continue;\n\n        for (let nx = x - 1; nx <= x + 1; nx++) {\n          if (isOutsideTheBoard(nx)) continue;\n          if (minesAndHintsBoard[ny][nx] === CONST.IS_MINE) continue;\n          this.revealSquare(ny, nx);\n        }\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/song/minesweeper/src/Minesweeper/stores/SquareStore.js"],"names":["action","CONST","stores","SquareStore","revealedSquareCount","initializeRevealedSquareCount","flagSquare","y","x","isSquareRevealedBoard","setIsSquareRevealedBoard","board","flagCount","incrementFlagCount","decreaseFlagCount","flag","mineCount","mine","IS_FLAGGED","IS_NOT_REVEALED","revealSquare","gameState","setGameState","game","minesAndHintsBoard","setMinesAndHintsBoard","boardTotalSize","isOutsideTheBoard","startCountingTime","stopCountingTime","elapsedTime","setDetonatedMineCoordinates","MINE_DETONATED","IS_REVEALED","BOARD_INITIALIZED","IS_MINE","GAME_CLEARED","ny","nx"],"mappings":"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","sourcesContent":["import {action} from 'mobx';\nimport CONST from '../constants.js';\nimport stores from './index';\n\nexport class SquareStore {\n    revealedSquareCount = 0;\n\n    initializeRevealedSquareCount = () => this.revealedSquareCount = 0;\n\n    flagSquare = (y, x) => {\n        const {isSquareRevealedBoard, setIsSquareRevealedBoard} = stores.board\n        const {flagCount, incrementFlagCount, decreaseFlagCount} = stores.flag\n        const {mineCount} = stores.mine\n\n        if (isSquareRevealedBoard[y][x] === CONST.IS_FLAGGED) {\n            decreaseFlagCount()\n            setIsSquareRevealedBoard(y, x, CONST.IS_NOT_REVEALED)\n\n        } else if (isSquareRevealedBoard[y][x] === CONST.IS_NOT_REVEALED) {\n            if (mineCount - flagCount === 0) return;\n            incrementFlagCount()\n            setIsSquareRevealedBoard(y, x, CONST.IS_FLAGGED)\n\n        }\n    }\n\n    revealSquare = (y, x) => {\n        // console.log('revealSquare', y, x)\n        const {gameState, setGameState} = stores.game;\n        const {\n            minesAndHintsBoard,\n            isSquareRevealedBoard,\n            setMinesAndHintsBoard,\n            setIsSquareRevealedBoard,\n            boardTotalSize,\n            isOutsideTheBoard\n        } = stores.board;\n        const {startCountingTime, stopCountingTime} = stores.elapsedTime;\n        const {setDetonatedMineCoordinates} = stores.game;\n        const {mineCount} = stores.mine\n\n        if (gameState === CONST.MINE_DETONATED) return\n\n        if (isSquareRevealedBoard[y][x] === CONST.IS_REVEALED) return\n\n        if (gameState === CONST.BOARD_INITIALIZED) {\n            setMinesAndHintsBoard(y, x);\n            startCountingTime();\n        }\n\n        if (minesAndHintsBoard[y][x] === CONST.IS_MINE) {\n            setDetonatedMineCoordinates(y, x)\n            setGameState(CONST.MINE_DETONATED)\n            stopCountingTime();\n            return;\n        }\n\n        setIsSquareRevealedBoard(y, x, CONST.IS_REVEALED)\n        this.revealedSquareCount++;\n\n        if (this.revealedSquareCount === boardTotalSize - mineCount) {\n            setGameState(CONST.GAME_CLEARED)\n            stopCountingTime();\n            return;\n        }\n\n        if (minesAndHintsBoard[y][x] === 0) {\n            for (let ny = y - 1; ny <= y + 1; ny++) {\n                if (isOutsideTheBoard(ny)) continue;\n\n                for (let nx = x - 1; nx <= x + 1; nx++) {\n                    if (isOutsideTheBoard(nx)) continue;\n                    if (minesAndHintsBoard[ny][nx] === CONST.IS_MINE) continue;\n\n                    this.revealSquare(ny, nx)\n                }\n            }\n        }\n\n    }\n\n}"]},"metadata":{},"sourceType":"module"}