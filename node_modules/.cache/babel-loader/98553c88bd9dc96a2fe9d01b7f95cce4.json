{"ast":null,"code":"import _initializerDefineProperty from \"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _applyDecoratedDescriptor from \"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nimport { observable, action } from 'mobx';\nimport CONST from '../constants.js';\nimport stores from '../stores';\nexport let BoardStore = (_class = (_temp = function BoardStore() {\n  _classCallCheck(this, BoardStore);\n\n  this.boardTotalSize = 0;\n\n  _initializerDefineProperty(this, \"boardSize\", _descriptor, this);\n\n  this.minesAndHintsBoard = {};\n\n  _initializerDefineProperty(this, \"isSquareRevealedBoard\", _descriptor2, this);\n\n  _initializerDefineProperty(this, \"setBoardSize\", _descriptor3, this);\n\n  _initializerDefineProperty(this, \"initializeBoardAdjustingSize\", _descriptor4, this);\n\n  _initializerDefineProperty(this, \"setIsSquareRevealedBoard\", _descriptor5, this);\n\n  this.isOutsideTheBoard = coordinate => coordinate === -1 || coordinate === this.boardSize;\n\n  this.setMinesAndHintsBoard = (squareIndexY, squareIndexX) => {\n    const {\n      setGameState\n    } = stores.game;\n    let randomIndex;\n    let randomIndexList = [];\n    let y;\n    let x;\n\n    while (randomIndexList.length < stores.mine.mineCount) {\n      randomIndex = Math.floor(Math.random() * this.boardTotalSize);\n      if (randomIndexList.includes(randomIndex)) continue;\n      randomIndexList.push(randomIndex);\n      y = Math.floor(randomIndex / this.boardSize);\n      x = randomIndex % this.boardSize;\n      if (squareIndexY === y && squareIndexX === x) continue;\n      this.minesAndHintsBoard[y][x] = CONST.IS_MINE;\n\n      for (let ny = y - 1; ny <= y + 1; ny++) {\n        if (this.isOutsideTheBoard(ny)) continue;\n\n        for (let nx = x - 1; nx <= x + 1; nx++) {\n          if (this.isOutsideTheBoard(nx)) continue;\n          if (this.minesAndHintsBoard[ny][nx] === CONST.IS_MINE) continue;\n          this.minesAndHintsBoard[ny][nx]++;\n        }\n      }\n    }\n\n    setGameState(CONST.BOARD_SET);\n  };\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"boardSize\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"isSquareRevealedBoard\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"setBoardSize\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return boardSize => {\n      this.boardSize = boardSize;\n      this.boardTotalSize = Math.pow(this.boardSize, 2);\n    };\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"initializeBoardAdjustingSize\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      const {\n        setGameState\n      } = stores.game;\n      this.minesAndHintsBoard = {};\n      this.isSquareRevealedBoard = {};\n\n      for (let y = 0; y < this.boardSize; y++) {\n        this.minesAndHintsBoard[y] = {};\n        this.isSquareRevealedBoard[y] = {};\n\n        for (let x = 0; x < this.boardSize; x++) {\n          this.minesAndHintsBoard[y][x] = 0;\n          this.setIsSquareRevealedBoard(y, x, CONST.IS_NOT_REVEALED);\n        }\n      }\n\n      setGameState(CONST.BOARD_INITIALIZED);\n    };\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"setIsSquareRevealedBoard\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return (y, x, isSquareRevealedBoard) => this.isSquareRevealedBoard[y][x] = isSquareRevealedBoard;\n  }\n})), _class);","map":{"version":3,"sources":["/Users/song/minesweeper/src/Minesweeper/stores/BoardStore.js"],"names":["observable","action","CONST","stores","BoardStore","boardTotalSize","minesAndHintsBoard","isOutsideTheBoard","coordinate","boardSize","setMinesAndHintsBoard","squareIndexY","squareIndexX","setGameState","game","randomIndex","randomIndexList","y","x","length","mine","mineCount","Math","floor","random","includes","push","IS_MINE","ny","nx","BOARD_SET","pow","isSquareRevealedBoard","setIsSquareRevealedBoard","IS_NOT_REVEALED","BOARD_INITIALIZED"],"mappings":"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","sourcesContent":["import {observable, action} from 'mobx';\nimport CONST from '../constants.js';\nimport stores from '../stores';\n\n\nexport class BoardStore {\n    boardTotalSize = 0\n\n    @observable boardSize = 0\n    minesAndHintsBoard = {}\n    @observable isSquareRevealedBoard = {}\n\n    @action\n    setBoardSize = boardSize => {\n        this.boardSize = boardSize\n        this.boardTotalSize = Math.pow(this.boardSize, 2)\n    }\n\n    @action\n    initializeBoardAdjustingSize = () => {\n        const {setGameState} = stores.game\n\n        this.minesAndHintsBoard = {}\n        this.isSquareRevealedBoard = {}\n\n        for (let y = 0; y < this.boardSize; y++) {\n            this.minesAndHintsBoard[y] = {}\n            this.isSquareRevealedBoard[y] = {}\n\n            for (let x = 0; x < this.boardSize; x++) {\n                this.minesAndHintsBoard[y][x] = 0\n                this.setIsSquareRevealedBoard(y, x, CONST.IS_NOT_REVEALED)\n\n            }\n        }\n\n        setGameState(CONST.BOARD_INITIALIZED)\n    }\n\n    @action setIsSquareRevealedBoard = (y, x, isSquareRevealedBoard) => this.isSquareRevealedBoard[y][x] = isSquareRevealedBoard\n\n    isOutsideTheBoard = (coordinate) => coordinate === -1 || coordinate === this.boardSize\n\n    setMinesAndHintsBoard = (squareIndexY, squareIndexX) => {\n        const {setGameState} = stores.game\n\n        let randomIndex\n        let randomIndexList = []\n        let y\n        let x\n\n        while (randomIndexList.length < stores.mine.mineCount) {\n            randomIndex = Math.floor(Math.random() * this.boardTotalSize)\n            if (randomIndexList.includes(randomIndex)) continue\n\n            randomIndexList.push(randomIndex)\n\n            y = Math.floor(randomIndex / this.boardSize)\n            x = randomIndex % this.boardSize\n\n            if (squareIndexY === y && squareIndexX === x) continue\n\n            this.minesAndHintsBoard[y][x] = CONST.IS_MINE\n\n            for (let ny = y-1; ny <= y+1; ny++) {\n                if (this.isOutsideTheBoard(ny)) continue\n\n                for (let nx = x-1; nx <= x+1; nx++) {\n                    if (this.isOutsideTheBoard(nx)) continue\n                    if (this.minesAndHintsBoard[ny][nx] === CONST.IS_MINE) continue\n                    this.minesAndHintsBoard[ny][nx]++\n                }\n            }\n        }\n\n        setGameState(CONST.BOARD_SET)\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}