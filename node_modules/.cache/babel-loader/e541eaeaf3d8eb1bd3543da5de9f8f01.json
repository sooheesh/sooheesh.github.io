{"ast":null,"code":"import _initializerDefineProperty from\"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";import _classCallCheck from\"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _applyDecoratedDescriptor from\"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";import _initializerWarningHelper from\"/Users/song/minesweeper/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";var _class,_descriptor,_descriptor2,_descriptor3,_descriptor4,_descriptor5,_temp;import{observable,action}from'mobx';import CONST from'../constants.js';import stores from'../stores';export var BoardStore=(_class=(_temp=function BoardStore(){var _this=this;_classCallCheck(this,BoardStore);this.boardTotalSize=0;_initializerDefineProperty(this,\"boardSize\",_descriptor,this);this.minesAndHintsBoard={};_initializerDefineProperty(this,\"isSquareRevealedBoard\",_descriptor2,this);_initializerDefineProperty(this,\"setBoardSize\",_descriptor3,this);_initializerDefineProperty(this,\"initializeBoardAdjustingSize\",_descriptor4,this);_initializerDefineProperty(this,\"setIsSquareRevealedBoard\",_descriptor5,this);this.isOutsideTheBoard=function(coordinate){return coordinate===-1||coordinate===_this.boardSize;};this.setMinesAndHintsBoard=function(squareIndexY,squareIndexX){var setGameState=stores.game.setGameState;var randomIndex;var randomIndexList=[];var y;var x;while(randomIndexList.length<stores.mine.mineCount){randomIndex=Math.floor(Math.random()*_this.boardTotalSize);if(randomIndexList.includes(randomIndex))continue;randomIndexList.push(randomIndex);y=Math.floor(randomIndex/_this.boardSize);x=randomIndex%_this.boardSize;if(squareIndexY===y&&squareIndexX===x)continue;_this.minesAndHintsBoard[y][x]=CONST.IS_MINE;for(var ny=y-1;ny<=y+1;ny++){if(_this.isOutsideTheBoard(ny))continue;for(var nx=x-1;nx<=x+1;nx++){if(_this.isOutsideTheBoard(nx))continue;if(_this.minesAndHintsBoard[ny][nx]===CONST.IS_MINE)continue;_this.minesAndHintsBoard[ny][nx]++;}}}setGameState(CONST.BOARD_SET);};},_temp),(_descriptor=_applyDecoratedDescriptor(_class.prototype,\"boardSize\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return 0;}}),_descriptor2=_applyDecoratedDescriptor(_class.prototype,\"isSquareRevealedBoard\",[observable],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){return{};}}),_descriptor3=_applyDecoratedDescriptor(_class.prototype,\"setBoardSize\",[action],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){var _this2=this;return function(boardSize){_this2.boardSize=boardSize;_this2.boardTotalSize=Math.pow(_this2.boardSize,2);};}}),_descriptor4=_applyDecoratedDescriptor(_class.prototype,\"initializeBoardAdjustingSize\",[action],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){var _this3=this;return function(){var setGameState=stores.game.setGameState;_this3.minesAndHintsBoard={};_this3.isSquareRevealedBoard={};for(var y=0;y<_this3.boardSize;y++){_this3.minesAndHintsBoard[y]={};_this3.isSquareRevealedBoard[y]={};for(var x=0;x<_this3.boardSize;x++){_this3.minesAndHintsBoard[y][x]=0;_this3.setIsSquareRevealedBoard(y,x,CONST.IS_NOT_REVEALED);}}setGameState(CONST.BOARD_INITIALIZED);};}}),_descriptor5=_applyDecoratedDescriptor(_class.prototype,\"setIsSquareRevealedBoard\",[action],{configurable:true,enumerable:true,writable:true,initializer:function initializer(){var _this4=this;return function(y,x,isSquareRevealedBoard){return _this4.isSquareRevealedBoard[y][x]=isSquareRevealedBoard;};}})),_class);","map":{"version":3,"sources":["/Users/song/minesweeper/src/Minesweeper/stores/BoardStore.js"],"names":["observable","action","CONST","stores","BoardStore","boardTotalSize","minesAndHintsBoard","isOutsideTheBoard","coordinate","boardSize","setMinesAndHintsBoard","squareIndexY","squareIndexX","setGameState","game","randomIndex","randomIndexList","y","x","length","mine","mineCount","Math","floor","random","includes","push","IS_MINE","ny","nx","BOARD_SET","pow","isSquareRevealedBoard","setIsSquareRevealedBoard","IS_NOT_REVEALED","BOARD_INITIALIZED"],"mappings":"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","sourcesContent":["import {observable, action} from 'mobx';\nimport CONST from '../constants.js';\nimport stores from '../stores';\n\n\nexport class BoardStore {\n    boardTotalSize = 0\n\n    @observable boardSize = 0\n    minesAndHintsBoard = {}\n    @observable isSquareRevealedBoard = {}\n\n    @action\n    setBoardSize = boardSize => {\n        this.boardSize = boardSize\n        this.boardTotalSize = Math.pow(this.boardSize, 2)\n    }\n\n    @action\n    initializeBoardAdjustingSize = () => {\n        const {setGameState} = stores.game\n\n        this.minesAndHintsBoard = {}\n        this.isSquareRevealedBoard = {}\n\n        for (let y = 0; y < this.boardSize; y++) {\n            this.minesAndHintsBoard[y] = {}\n            this.isSquareRevealedBoard[y] = {}\n\n            for (let x = 0; x < this.boardSize; x++) {\n                this.minesAndHintsBoard[y][x] = 0\n                this.setIsSquareRevealedBoard(y, x, CONST.IS_NOT_REVEALED)\n\n            }\n        }\n\n        setGameState(CONST.BOARD_INITIALIZED)\n    }\n\n    @action setIsSquareRevealedBoard = (y, x, isSquareRevealedBoard) => this.isSquareRevealedBoard[y][x] = isSquareRevealedBoard\n\n    isOutsideTheBoard = (coordinate) => coordinate === -1 || coordinate === this.boardSize\n\n    setMinesAndHintsBoard = (squareIndexY, squareIndexX) => {\n        const {setGameState} = stores.game\n\n        let randomIndex\n        let randomIndexList = []\n        let y\n        let x\n\n        while (randomIndexList.length < stores.mine.mineCount) {\n            randomIndex = Math.floor(Math.random() * this.boardTotalSize)\n            if (randomIndexList.includes(randomIndex)) continue\n\n            randomIndexList.push(randomIndex)\n\n            y = Math.floor(randomIndex / this.boardSize)\n            x = randomIndex % this.boardSize\n\n            if (squareIndexY === y && squareIndexX === x) continue\n\n            this.minesAndHintsBoard[y][x] = CONST.IS_MINE\n\n            for (let ny = y-1; ny <= y+1; ny++) {\n                if (this.isOutsideTheBoard(ny)) continue\n\n                for (let nx = x-1; nx <= x+1; nx++) {\n                    if (this.isOutsideTheBoard(nx)) continue\n                    if (this.minesAndHintsBoard[ny][nx] === CONST.IS_MINE) continue\n                    this.minesAndHintsBoard[ny][nx]++\n                }\n            }\n        }\n\n        setGameState(CONST.BOARD_SET)\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}